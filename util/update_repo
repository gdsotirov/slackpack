#!/bin/sh
#
# SlackPack
# Copyright (C) 2006-2012  Georgi D. Sotirov, gsotirov@sotirov-bg.net
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# DESCRIPTION:
# Script to update/create the service files for a Slackare packages repository
#
# The script is based on the example found on
# http://software.jaos.org/BUILD/slapt-get/FAQ.html#slgFAQ17
#
# $Id: update_repo,v 1.19 2012/08/24 08:52:44 gsotirov Exp $
#

TMPDIR=/tmp/slackpack
TOTAL_SIZE=0
TOTAL_USIZE=0
# These are the current possible package extensions
PKG_EXTS="tbz|tgz|tlz|txz"
# Wildcard for the current possible package extensions
PKG_EXTS_WCARD="*.t[bglx]z"
PKG_REGEX="^([_\-\+A-Za-z0-9]+)\-([0-9][\.A-Za-z0-9]+)\-([_a-zA-Z0-9]+)\-([0-9]+[A-Za-z]*)\.($PKG_EXTS)$"

function gen_checksums_md5 {
  echo "These are the MD5 message digests for the files in this directory."
  echo ""
  echo "md5sum \`tree -fi --noreport\`"
  echo ""
  echo "If you want to test your files, use 'md5sum' and compare the values to"
  echo "the ones listed here."
  echo ""
  echo "To test all these files, use this command:"
  echo ""
  echo "md5sum -c CHECKSUMS.md5 | less"
  echo ""
  echo "'md5sum' can be found in the GNU coreutils package on ftp.gnu.org in"
  echo "/pub/gnu, or at any GNU mirror site."
  echo ""
  echo "MD5 message digest                Filename"

  md5sum `tree -fi --noreport` 2>/dev/null
}

function gen_filelist_txt {
  date
  echo ""
  echo "Here is the file list for this directory. Please, keep in mind that mirrors"
  echo "are not updated instantlly, but if you find a mirror that is inconsistent"
  echo "for more than 24 hours write to the site maintainer or mirror administrator."
  echo ""
  echo "ls -lad \`tree -fi --noreport\`"

  ls -lad `tree -fi --noreport`
}

function gen_meta {
  if [ ! -f $1 ]; then
    echo "File not found: $1"
    exit 1;
  fi

  NAME=$(echo $1 | sed -re "s/(.*\/)(.*)$/\2/")

  if [ "x`echo $NAME | grep -E $PKG_REGEX`" == "x" ]; then
    return;
  fi

  PKGEXT=$(echo $NAME | sed 's/.*\.//');

  case $PKGEXT in
    'txz' )
      PKGCOMPR="xz"
      ;;
    'tgz' )
      PKGCOMPR="gzip"
      ;;
    'tbz' )
      PKGCOMPR="bzip2"
      ;;
    'tlz' )
      PKGCOMPR="lzma"
      ;;
  esac

  SIZE=$(expr `ls -l $1 | awk '{print $5}'` / 1024)
  USIZE=$(expr `$PKGCOMPR -dc $1 | wc -c` / 1024)
  REQUIRED=$( tar xfO $1 install/slack-required  2>/dev/null | xargs -r -iZ echo -n "Z," | sed -e "s/,$//")
  CONFLICTS=$(tar xfO $1 install/slack-conflicts 2>/dev/null | xargs -r -iZ echo -n "Z," | sed -e "s/,$//")
  SUGGESTS=$( tar xfO $1 install/slack-suggests  2>/dev/null | xargs -r -iZ echo -n "Z," | sed -e "s/,$//")

  ((TOTAL_SIZE += SIZE / 1024))
  ((TOTAL_USIZE += USIZE / 1024))

  echo "PACKAGE NAME:  $NAME"
  echo "PACKAGE LOCATION:  $1"
  echo "PACKAGE SIZE (compressed):  $SIZE K"
  echo "PACKAGE SIZE (uncompressed):  $USIZE K"
  echo "PACKAGE REQUIRED:  $REQUIRED"
  echo "PACKAGE CONFLICTS:  $CONFLICTS"
  echo "PACKAGE SUGGESTS:  $SUGGESTS"
  echo "PACKAGE DESCRIPTION:"
  tar xfO $1 install/slack-desc | grep -E '\w+\:' | grep -v '^#'

  echo ""
}

function gen_packages_txt {
  # If the temp directory doesn't exists - create it
  if [ ! -e $TMPDIR ]; then
    mkdir $TMPDIR
  fi

  CWD=`pwd`
  CWDNM=`basename $CWD`

  for pkg in `find . -type f -name "$PKG_EXTS_WCARD" -print -maxdepth 1 | sort`; do
    # Check for the meta file in the temp directory
    if [ ! -e $TMPDIR/$CWDNM/$pkg.meta ]; then
      if [ ! -e $TMPDIR/$CWDNM ]; then
        mkdir $TMPDIR/$CWDNM
      fi
      gen_meta $pkg > $TMPDIR/$CWDNM/$pkg.meta
    fi
    cat $TMPDIR/$CWDNM/$pkg.meta >> PACKAGES.TXT.TMP
  done

  echo "PACKAGES.TXT; `date`"
  echo ""
  echo "This file provides details on the Slackware packages found"
  echo "in the current directory."
  echo ""
  echo "Total size of all packages (compressed):  $TOTAL_SIZE MB"
  echo "Total size of all packages (uncompressed):  $TOTAL_USIZE MB"
  echo ""

  cat PACKAGES.TXT.TMP
  rm -f PACKAGES.TXT.TMP
}

function prepare_repo {
  # cleanup unnecessary files
  # - all logs
  find . -type f -name '*log' -exec rm --interactive {} \;
  # - all temporary files created by editors
  find . -type f -name '*~'   -exec rm --interactive {} \;
  # - all hidden files (presumably created by CVS)
  find . -type f -name '.*'   -exec rm --interactive {} \;
  # - all CVS service files and dirs
  for dir in `find . -type d -name 'CVS'`;
  do
    read -n1 -p "rm: remove directory '$dir' and its contents? "
    [ "$REPLY" == "y" ] && rm -r $dir
    echo
  done
  # - all SVN service files and dirs
  for dir in `find . -type d -name '.svn'`;
  do
    read -n1 -p "rm: remove directory '$dir' and its contents? "
    [ "$REPLY" == "y" ] && rm -r $dir
    echo
  done

  # fix file and directory permissions and onership
  find . -type f -exec chmod 644 {} \;
  find . -type d -exec chmod 755 {} \;
  chown root:root * -R
}

# Execute actions to update repository service data
case "$1" in
  "packages")
     echo -n "Generating PACKAGES.TXT... "
     gen_packages_txt >PACKAGES.TXT
     gzip -9 -c PACKAGES.TXT >PACKAGES.TXT.gz
     echo "Done."
  ;;
  "checksums")
     echo -n "Generating CHECKSUMS.md5... "
     gen_checksums_md5 >CHECKSUMS.md5
     gzip -9 -c CHECKSUMS.md5 >CHECKSUMS.md5.gz
     echo "Done."
  ;;
  "filelist")
     echo -n "Generating FILELIST.TXT... "
     gen_filelist_txt >FILELIST.TXT
     gzip -9 -c FILELIST.TXT >FILELIST.TXT.gz
     echo "Done."
  ;;
  "prepare")
     echo "Preparing repository: "
     prepare_repo
     echo "Done."
  ;;
  *)
     $0 prepare
     $0 packages
     $0 checksums
     $0 filelist
     echo "All done."
  ;;
esac
