#!/bin/sh
#
# SlackPack
# Copyright (C) 2006-2007  Georgi D. Sotirov, gsotirov@sotirov-bg.net
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# DESCRIPTION:
# Script to update/create the service files for a Slackare repository
#
# The script is based on the example found on
# http://software.jaos.org/BUILD/slapt-get/FAQ.html#slgFAQ17
#
# $Id: update_repo,v 1.8 2007/09/19 20:17:08 gsotirov Exp $
#

TMPDIR=/tmp/slackpack
TOTAL_SIZE=0
TOTAL_USIZE=0

function gen_checksums_md5 {
  echo "These are the MD5 message digests for the files in this directory."
  echo "If you want to test your files, use 'md5sum' and compare the values to"
  echo "the ones listed here."
  echo ""
  echo "To test all these files, use this command:"
  echo ""
  echo "md5sum -c CHECKSUMS.md5 | less"
  echo ""
  echo "'md5sum' can be found in the GNU coreutils package on ftp.gnu.org in"
  echo "/pub/gnu, or at any GNU mirror site."
  echo ""
  echo "MD5 message digest                Filename"
  for file in `tree -fi --noreport`; do
    if [ -f $file ]; then
      md5sum $file
    fi
  done
}

function gen_filelist_txt {
  date
  echo ""
  echo "Here is the file list for this directory. Please, keep in mind that mirrors"
  echo "are not updated instantlly, but if you find a mirror that is inconsistent"
  echo "for more than 24 hours write to the site maintainer or mirror administrator."
  echo ""
  echo "ls -lad \`tree -fi --noreport\`"
  ls -lad `tree -fi --noreport`
}

function gen_meta {
  if [ ! -f $1 ]; then
    echo "File not found: $1"
    exit 1;
  fi

  if [ "`echo $1 | grep -E '(.*{1,})\-(.*[\.\-].*[\.\-].*).tgz[ ]{0,}$'`" == "" ]; then
    return;
  fi

  NAME=$(echo $1 | sed -re "s/(.*\/)(.*.tgz)$/\2/")
  SIZE=$(expr `gunzip -l $1 | tail -1 | awk '{print $1}'` / 1024)
  USIZE=$(expr `gunzip -l $1 | tail -1 | awk '{print $2}'` / 1024)
  REQUIRED=$(tar xzfO $1 install/slack-required 2>/dev/null | xargs -r -iZ echo -n "Z," | sed -e "s/,$//")
  CONFLICTS=$(tar xzfO $1 install/slack-conflicts 2>/dev/null | xargs -r -iZ echo -n "Z," | sed -e "s/,$//")
  SUGGESTS=$(tar xzfO $1 install/slack-suggests 2>/dev/null | xargs -r -iZ echo -n "Z," | sed -e "s/,$//")

  ((TOTAL_SIZE += SIZE / 1024))
  ((TOTAL_USIZE += USIZE / 1024))

  echo "PACKAGE NAME:  $NAME"
  echo "PACKAGE LOCATION:  $1"
  echo "PACKAGE SIZE (compressed):  $SIZE K"
  echo "PACKAGE SIZE (uncompressed):  $USIZE K"
  echo "PACKAGE REQUIRED:  $REQUIRED"
  echo "PACKAGE CONFLICTS:  $CONFLICTS"
  echo "PACKAGE SUGGESTS:  $SUGGESTS"
  echo "PACKAGE DESCRIPTION:"
  tar xzfO $1 install/slack-desc | grep -E '\w+\:' | grep -v '^#'
  echo ""
}

function gen_packages_txt {
  # If the temp directory doesn't exists - create it
  if [ ! -e $TMPDIR ]; then
    mkdir $TMPDIR
  fi

  CWD=`pwd`
  CWDNM=`basename $CWD`
  for pkg in `find . -type f -name '*.tgz' -print | sort`; do
    # Check for the meta file in the temp directory
    if [ ! -e $TMPDIR/$CWDNM/$pkg.meta ]; then
      if [ ! -e $TMPDIR/$CWDNM ]; then
        mkdir $TMPDIR/$CWDNM
      fi
      gen_meta $pkg > $TMPDIR/$CWDNM/$pkg.meta
    fi
    cat $TMPDIR/$CWDNM/$pkg.meta >> PACKAGES.TXT.TMP
  done
  echo "PACKAGES.TXT; `date`"
  echo ""
  echo "This file provides details on the Slackware packages found"
  echo "in the current directory."
  echo ""
  echo "Total size of all packages (compressed):  $TOTAL_SIZE MB"
  echo "Total size of all packages (uncompressed):  $TOTAL_USIZE MB"
  echo ""
  cat PACKAGES.TXT.TMP
  rm -f PACKAGES.TXT.TMP
}

# Execute actions to update repository service data
case "$1" in
  "packages")
     echo -n "Generating PACKAGES.TXT... "
     gen_packages_txt >PACKAGES.TXT
     gzip -9 -c PACKAGES.TXT >PACKAGES.TXT.gz
     echo "Done."
  ;;
  "checksums")
     echo -n "Generating CHECKSUMS.md5... "
     gen_checksums_md5 >CHECKSUMS.md5
     gzip -9 -c CHECKSUMS.md5 >CHECKSUMS.md5.gz
     echo "Done."
  ;;
  "filelist")
     echo -n "Generating FILELIST.TXT... "
     gen_filelist_txt >FILELIST.TXT
     gzip -9 -c FILELIST.TXT >FILELIST.TXT.gz
     echo "Done."
  ;;
  *)
     $0 packages
     $0 checksums
     $0 filelist
     echo "All done."
  ;;
esac
